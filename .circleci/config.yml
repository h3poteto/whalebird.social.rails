version: 2
jobs:
  build:
    docker:
      - image: ghcr.io/h3poteto/rails-node:3.1.3-node16-slim-bullseye
        environment:
          BUNDLE_APP_CONFIG: /usr/src/app/.bundle
          DB_HOST: 127.0.0.1
      - image: postgres:15.1-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: sample
          POSTGRES_DB: whalebirdsocial
    working_directory: /usr/src/app
    steps:
      - checkout
      - restore_cache:
          name: Restoring Cache - bundle
          keys:
            - bundle-ruby313-{{ checksum "Gemfile" }}-{{ checksum "Gemfile.lock" }}
            - bundle-ruby313-{{ checksum "Gemfile" }}-
      - run:
          name: Bundle install
          command: bundle install --path vendor/bundle
      - save_cache:
          name: Saving Cache - bundle
          key: bundle-ruby313-{{ checksum "Gemfile" }}-{{ checksum "Gemfile.lock" }}
          paths:
            - "vendor/bundle"

      - run:
          name: Migrate database
          command: |
            bundle exec rake db:create RAILS_ENV=test
            bundle exec rake db:migrate RAILS_ENV=test
      - run:
          name: Test
          command: bundle exec rspec
      - run:
          name: Assets precompile
          command: bundle exec rake assets:precompile

  image:
    machine: true
    steps:
      - checkout
      - run:
          name: Check docker version
          command: docker version
      - run:
          name: Docker build
          command: |
            docker build -t $AWS_ECR_REPOSITORY:$CIRCLE_SHA1 .
            docker tag $AWS_ECR_REPOSITORY:$CIRCLE_SHA1 $AWS_ECR_REPOSITORY:latest
      - run:
          name: Docker push
          command: |
            aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin https://564677439943.dkr.ecr.ap-northeast-1.amazonaws.com
            docker push $AWS_ECR_REPOSITORY:$CIRCLE_SHA1
            docker push $AWS_ECR_REPOSITORY:latest

  create_pull_request:
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - run:
          name: Install_hub
          command: |
            curl -sSLf https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz | \
            tar zxf - --strip-components=1 -C /tmp/ && \
            sudo mv /tmp/bin/hub /usr/local/bin/hub
            hub --version
      - run:
          name: Install kustomize
          command: |
            curl -sSLf https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz | \
            tar zxf - -C /tmp/ && \
            sudo mv /tmp/kustomize /usr/local/bin/kustomize
            kustomize version
      - run:
          name: Update_tag_and_create_pr
          command: |
            git config --global user.name ${GITHUB_NAME}
            git config --global user.email ${GITHUB_EMAIL}
            git clone https://${GITHUB_NAME}:${GITHUB_TOKEN}@github.com/h3poteto/k8s-services.git
            cd k8s-services
            git init
            git checkout -b update-whalebirdsocial-image-${CIRCLE_SHA1}
            cd external-prd/whalebirdsocial
            kustomize edit set image "rails=${AWS_ECR_REPOSITORY}:${CIRCLE_SHA1}"
            git add .
            git commit -m "Update docker image for whalebirdsocial to ${CIRCLE_SHA1}"
            git push --set-upstream origin update-whalebirdsocial-image-${CIRCLE_SHA1}
            hub pull-request -m "[Image update] whalebirdsocial ${CIRCLE_SHA1}"



workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - image:
          filters:
            branches:
              only:
                - master
      - create_pull_request:
          filters:
            branches:
              only:
                - master
          requires:
            - build
            - image
